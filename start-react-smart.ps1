# Smart Start Script for React Frontend - Network Aware
# This PowerShell script uses the network configuration to start React appropriately

param(
    [string]$Profile = ""
)

# Function to check if network_config.py exists and is working
function Test-NetworkConfig {
    try {
        $result = python ..\network_config.py status 2>$null
        return $?
    }
    catch {
        return $false
    }
}

# Function to create/update .env file with network settings
function Update-EnvFile {
    param([hashtable]$Config)
    
    $envContent = @"
# Auto-generated by start-react-smart.ps1
# Network Profile: $($Config.Profile)
PORT=$($Config.PORT)
REACT_APP_API_BASE_URL=$($Config.API_BASE_URL)
GENERATE_SOURCEMAP=false
BROWSER=none
"@
    
    $envContent | Out-File -FilePath ".env" -Encoding utf8
    Write-Host "üìù Updated .env file with network configuration" -ForegroundColor Green
}

# Function to start React with network configuration  
function Start-ReactWithConfig {
    Write-Host "üåê Starting React with network configuration..." -ForegroundColor Green
    
    # Get frontend configuration
    $configScript = @"
import sys; sys.path.append('..')
from network_config import NetworkConfig
config = NetworkConfig()
frontend_config = config.get_frontend_config()
print(f"{frontend_config['PORT']}|{frontend_config['API_BASE_URL']}|{config.active_profile}")
"@
    
    $configOutput = python -c $configScript 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        $parts = $configOutput.Split("|")
        $port = $parts[0]
        $apiUrl = $parts[1] 
        $profile = $parts[2]
        
        # Update environment file
        Update-EnvFile -Config @{
            PORT = $port
            API_BASE_URL = $apiUrl
            Profile = $profile
        }
        
        Write-Host "‚öõÔ∏è  Starting React on port $port" -ForegroundColor Yellow
        Write-Host "üîó API Base URL: $apiUrl" -ForegroundColor Cyan
        
        # Set environment variable and start
        $env:PORT = $port
        npm start
    } else {
        Write-Host "‚ùå Failed to get network configuration" -ForegroundColor Red
        Start-ReactFallback
    }
}

# Function to start React with fallback settings
function Start-ReactFallback {
    Write-Host "üîÑ Using fallback React configuration..." -ForegroundColor Yellow
    
    # Create fallback .env
    Update-EnvFile -Config @{
        PORT = "3000"
        API_BASE_URL = "http://0.0.0.0:8000"
        Profile = "hotspot-fallback"
    }
    
    Write-Host "üöÄ Starting React on port 3000 (hotspot fallback mode)" -ForegroundColor Green
    $env:PORT = "3000"
    npm start
}

# Function to change network profile and restart
function Set-NetworkProfile {
    param([string]$NewProfile)
    
    Write-Host "üîß Changing network profile to: $NewProfile" -ForegroundColor Cyan
    python ..\network_config.py $NewProfile
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Network profile updated successfully!" -ForegroundColor Green
        Start-ReactWithConfig
    } else {
        Write-Host "‚ùå Failed to update network profile" -ForegroundColor Red
        Start-ReactFallback
    }
}

# Main script logic
Write-Host "‚öõÔ∏è  DeliveryApp Frontend - Smart Network Launcher" -ForegroundColor Magenta
Write-Host "=" * 50 -ForegroundColor Gray

# Change to frontend directory
if (-not (Test-Path "package.json")) {
    Write-Host "üìÅ Changing to frontend directory..." -ForegroundColor Blue
    Set-Location "frontend" -ErrorAction SilentlyContinue
}

# Check if we're in the right directory
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Cannot find package.json. Make sure you're in the right directory." -ForegroundColor Red
    exit 1
}

# Handle profile parameter
if ($Profile -ne "") {
    if ($Profile -in @("private", "public", "hotspot", "phone")) {
        Set-NetworkProfile -NewProfile $Profile
        exit
    } else {
        Write-Host "‚ùå Invalid profile. Use: private, public, hotspot, or phone" -ForegroundColor Red
        exit 1
    }
}

# Check if network configuration is available
if (Test-NetworkConfig) {
    Start-ReactWithConfig
} else {
    Write-Host "‚ö†Ô∏è  Network configuration not available, using fallback..." -ForegroundColor Yellow
    Start-ReactFallback
}